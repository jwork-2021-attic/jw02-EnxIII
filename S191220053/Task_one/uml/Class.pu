@startuml

interface Linable{
    __ @method __
    +void setPosition(Position position)
    +Position getPosition()
    +int getValue()
}


class Line{
    __@members__
    -Position[] positions
    __@method__
    +void put(Linable linable, int i)
    +Linable get(int i)
}


class Position{
    __ @members __
    -Linable linable
    __@method__
    +void setLinable(Linable linable)
    +String toString()
    +Linable[] toArray()
}

enum Gourd {
    __@members__
    -final int r
    -final int g
    -final int b
    -Position position

    __ @method __
    +int rank()
    +void swapPosition(Gourd another)
    +static Gourd getGourdByRank(int rank)
    +String toString()
    +void setPosition(Position position)
    +Position getPosition()
    +int getValue()
}

class Geezer{
    __ @members__
    -static Geezer theGeezer
    -Sorter sorter
    __@method__
    +static Geezer getTheGeezer()
    +void setSorter(Sorter sorter)
    +String lineUp(Line line)
    -String[] parsePlan(String plan)
    -void execute(String step)

}

interface Sorter{
    __@method__
    +void load(int[] elements)
    +void sort()
    +String getPlan()
}

class BubbleSorter{
    __@members__
    -int[] a
    -String plan = ""

    __ @method __
    -void swap(int i, int j)
    +void load(int[] a)
    +void sort()
    +String getPlan()
}

Sorter <|-- BubbleSorter
Geezer o-- Sorter
Position o-- Linable
Gourd o-- Position
Gourd --|> Linable
Line *-- Position





@enduml